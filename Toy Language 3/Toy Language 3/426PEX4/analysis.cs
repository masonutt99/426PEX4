/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMultipleConstantDeclarations(AMultipleConstantDeclarations node);
    void CaseAPassConstantDeclarations(APassConstantDeclarations node);
    void CaseAConstantDeclaration(AConstantDeclaration node);
    void CaseAMultipleFunctionDeclarations(AMultipleFunctionDeclarations node);
    void CaseAPassFunctionDeclarations(APassFunctionDeclarations node);
    void CaseAFunctionDeclaration(AFunctionDeclaration node);
    void CaseAMainMainFunction(AMainMainFunction node);
    void CaseAPassMainFunction(APassMainFunction node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseAPassStatements(APassStatements node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseAIfstatementStatement(AIfstatementStatement node);
    void CaseAWhilestatementStatement(AWhilestatementStatement node);
    void CaseAFunctionCallStatementStatement(AFunctionCallStatementStatement node);
    void CaseADeclareStatement(ADeclareStatement node);
    void CaseAAssignStatement(AAssignStatement node);
    void CaseAElsee(AElsee node);
    void CaseAIfStatement(AIfStatement node);
    void CaseAWhileStatement(AWhileStatement node);
    void CaseAFunctionCallStatement(AFunctionCallStatement node);
    void CaseAOrexpExpression(AOrexpExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseAAndexpExpression2(AAndexpExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseAEqualexpExpression3(AEqualexpExpression3 node);
    void CaseANotequalexpExpression3(ANotequalexpExpression3 node);
    void CaseAGreaterequalexpExpression3(AGreaterequalexpExpression3 node);
    void CaseALessequalexpExpression3(ALessequalexpExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseALessexpExpression4(ALessexpExpression4 node);
    void CaseAGreaterexpExpression4(AGreaterexpExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAAddexpExpression5(AAddexpExpression5 node);
    void CaseASubtractexpExpression5(ASubtractexpExpression5 node);
    void CaseAPassExpression5(APassExpression5 node);
    void CaseAMultexpExpression6(AMultexpExpression6 node);
    void CaseADivexpExpression6(ADivexpExpression6 node);
    void CaseAPassExpression6(APassExpression6 node);
    void CaseANegateexpExpression7(ANegateexpExpression7 node);
    void CaseANotexpExpression7(ANotexpExpression7 node);
    void CaseAPassExpression7(APassExpression7 node);
    void CaseAParenthesesexpExpression8(AParenthesesexpExpression8 node);
    void CaseAPassExpression8(APassExpression8 node);
    void CaseAIntexpOperand(AIntexpOperand node);
    void CaseAFloatexpOperand(AFloatexpOperand node);
    void CaseAVariableOperand(AVariableOperand node);
    void CaseAStringexpOperand(AStringexpOperand node);
    void CaseANoneParamDecs(ANoneParamDecs node);
    void CaseAOneOrMoreParamDecs(AOneOrMoreParamDecs node);
    void CaseANoneNextParamDec(ANoneNextParamDec node);
    void CaseANextNextParamDec(ANextNextParamDec node);
    void CaseAParamDec(AParamDec node);
    void CaseANoneParameters(ANoneParameters node);
    void CaseAOneOrMoreParameters(AOneOrMoreParameters node);
    void CaseANoneNextParameter(ANoneNextParameter node);
    void CaseANextNextParameter(ANextNextParameter node);
    void CaseAParameter(AParameter node);

    void CaseTInt(TInt node);
    void CaseTString(TString node);
    void CaseTFloat(TFloat node);
    void CaseTCommentLine(TCommentLine node);
    void CaseTCommentMultiline(TCommentMultiline node);
    void CaseTEol(TEol node);
    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTMult(TMult node);
    void CaseTMinus(TMinus node);
    void CaseTDiv(TDiv node);
    void CaseTLeftCurly(TLeftCurly node);
    void CaseTRightCurly(TRightCurly node);
    void CaseTLeftParenthesis(TLeftParenthesis node);
    void CaseTRightParenthesis(TRightParenthesis node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTEquivalent(TEquivalent node);
    void CaseTNotEquivalent(TNotEquivalent node);
    void CaseTLessThan(TLessThan node);
    void CaseTGreaterThan(TGreaterThan node);
    void CaseTGreaterequal(TGreaterequal node);
    void CaseTLessequal(TLessequal node);
    void CaseTWhile(TWhile node);
    void CaseTIf(TIf node);
    void CaseTElse(TElse node);
    void CaseTConst(TConst node);
    void CaseTDelimiter(TDelimiter node);
    void CaseTDef(TDef node);
    void CaseTMain(TMain node);
    void CaseTId(TId node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleConstantDeclarations(AMultipleConstantDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassConstantDeclarations(APassConstantDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleFunctionDeclarations(AMultipleFunctionDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassFunctionDeclarations(APassFunctionDeclarations node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionDeclaration(AFunctionDeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainMainFunction(AMainMainFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassMainFunction(APassMainFunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassStatements(APassStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfstatementStatement(AIfstatementStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhilestatementStatement(AWhilestatementStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareStatement(ADeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatement(AAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAElsee(AElsee node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfStatement(AIfStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAWhileStatement(AWhileStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrexpExpression(AOrexpExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndexpExpression2(AAndexpExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualexpExpression3(AEqualexpExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotequalexpExpression3(ANotequalexpExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterequalexpExpression3(AGreaterequalexpExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessequalexpExpression3(ALessequalexpExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessexpExpression4(ALessexpExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterexpExpression4(AGreaterexpExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddexpExpression5(AAddexpExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractexpExpression5(ASubtractexpExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression5(APassExpression5 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultexpExpression6(AMultexpExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivexpExpression6(ADivexpExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression6(APassExpression6 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegateexpExpression7(ANegateexpExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotexpExpression7(ANotexpExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression7(APassExpression7 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesesexpExpression8(AParenthesesexpExpression8 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression8(APassExpression8 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntexpOperand(AIntexpOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatexpOperand(AFloatexpOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringexpOperand(AStringexpOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParamDecs(ANoneParamDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneOrMoreParamDecs(AOneOrMoreParamDecs node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneNextParamDec(ANoneNextParamDec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANextNextParamDec(ANextNextParamDec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParamDec(AParamDec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParameters(ANoneParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOneOrMoreParameters(AOneOrMoreParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneNextParameter(ANoneNextParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANextNextParameter(ANextNextParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParameter(AParameter node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTInt(TInt node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCommentLine(TCommentLine node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTCommentMultiline(TCommentMultiline node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftCurly(TLeftCurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightCurly(TRightCurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftParenthesis(TLeftParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightParenthesis(TRightParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEquivalent(TEquivalent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNotEquivalent(TNotEquivalent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessThan(TLessThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterThan(TGreaterThan node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGreaterequal(TGreaterequal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLessequal(TLessequal node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTWhile(TWhile node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTElse(TElse node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConst(TConst node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDelimiter(TDelimiter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDef(TDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetConstantDeclarations() != null)
        {
            node.GetConstantDeclarations().Apply(this);
        }
        if(node.GetFunctionDeclarations() != null)
        {
            node.GetFunctionDeclarations().Apply(this);
        }
        if(node.GetMainFunction() != null)
        {
            node.GetMainFunction().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleConstantDeclarations(AMultipleConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstantDeclarations(AMultipleConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstantDeclarations(AMultipleConstantDeclarations node)
    {
        InAMultipleConstantDeclarations(node);
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        if(node.GetConstantDeclarations() != null)
        {
            node.GetConstantDeclarations().Apply(this);
        }
        OutAMultipleConstantDeclarations(node);
    }
    public virtual void InAPassConstantDeclarations(APassConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassConstantDeclarations(APassConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassConstantDeclarations(APassConstantDeclarations node)
    {
        InAPassConstantDeclarations(node);
        OutAPassConstantDeclarations(node);
    }
    public virtual void InAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        InAConstantDeclaration(node);
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAConstantDeclaration(node);
    }
    public virtual void InAMultipleFunctionDeclarations(AMultipleFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctionDeclarations(AMultipleFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctionDeclarations(AMultipleFunctionDeclarations node)
    {
        InAMultipleFunctionDeclarations(node);
        if(node.GetFunctionDeclarations() != null)
        {
            node.GetFunctionDeclarations().Apply(this);
        }
        if(node.GetFunctionDeclaration() != null)
        {
            node.GetFunctionDeclaration().Apply(this);
        }
        OutAMultipleFunctionDeclarations(node);
    }
    public virtual void InAPassFunctionDeclarations(APassFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassFunctionDeclarations(APassFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassFunctionDeclarations(APassFunctionDeclarations node)
    {
        InAPassFunctionDeclarations(node);
        OutAPassFunctionDeclarations(node);
    }
    public virtual void InAFunctionDeclaration(AFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionDeclaration(AFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionDeclaration(AFunctionDeclaration node)
    {
        InAFunctionDeclaration(node);
        if(node.GetDef() != null)
        {
            node.GetDef().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetParamDecs() != null)
        {
            node.GetParamDecs().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAFunctionDeclaration(node);
    }
    public virtual void InAMainMainFunction(AMainMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMainFunction(AMainMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMainFunction(AMainMainFunction node)
    {
        InAMainMainFunction(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAMainMainFunction(node);
    }
    public virtual void InAPassMainFunction(APassMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassMainFunction(APassMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassMainFunction(APassMainFunction node)
    {
        InAPassMainFunction(node);
        OutAPassMainFunction(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InAPassStatements(APassStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassStatements(APassStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassStatements(APassStatements node)
    {
        InAPassStatements(node);
        OutAPassStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InAIfstatementStatement(AIfstatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfstatementStatement(AIfstatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfstatementStatement(AIfstatementStatement node)
    {
        InAIfstatementStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfstatementStatement(node);
    }
    public virtual void InAWhilestatementStatement(AWhilestatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilestatementStatement(AWhilestatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilestatementStatement(AWhilestatementStatement node)
    {
        InAWhilestatementStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhilestatementStatement(node);
    }
    public virtual void InAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        InAFunctionCallStatementStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutAFunctionCallStatementStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAElsee(AElsee node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElsee(AElsee node)
    {
        DefaultOut(node);
    }

    public override void CaseAElsee(AElsee node)
    {
        InAElsee(node);
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAElsee(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetElsee() != null)
        {
            node.GetElsee().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAOrexpExpression(AOrexpExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrexpExpression(AOrexpExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrexpExpression(AOrexpExpression node)
    {
        InAOrexpExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAOrexpExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAndexpExpression2(AAndexpExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndexpExpression2(AAndexpExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndexpExpression2(AAndexpExpression2 node)
    {
        InAAndexpExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAAndexpExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAEqualexpExpression3(AEqualexpExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualexpExpression3(AEqualexpExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualexpExpression3(AEqualexpExpression3 node)
    {
        InAEqualexpExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetEquivalent() != null)
        {
            node.GetEquivalent().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAEqualexpExpression3(node);
    }
    public virtual void InANotequalexpExpression3(ANotequalexpExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotequalexpExpression3(ANotequalexpExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotequalexpExpression3(ANotequalexpExpression3 node)
    {
        InANotequalexpExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetNotEquivalent() != null)
        {
            node.GetNotEquivalent().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutANotequalexpExpression3(node);
    }
    public virtual void InAGreaterequalexpExpression3(AGreaterequalexpExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterequalexpExpression3(AGreaterequalexpExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterequalexpExpression3(AGreaterequalexpExpression3 node)
    {
        InAGreaterequalexpExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetGreaterequal() != null)
        {
            node.GetGreaterequal().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAGreaterequalexpExpression3(node);
    }
    public virtual void InALessequalexpExpression3(ALessequalexpExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessequalexpExpression3(ALessequalexpExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessequalexpExpression3(ALessequalexpExpression3 node)
    {
        InALessequalexpExpression3(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetLessequal() != null)
        {
            node.GetLessequal().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutALessequalexpExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InALessexpExpression4(ALessexpExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessexpExpression4(ALessexpExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessexpExpression4(ALessexpExpression4 node)
    {
        InALessexpExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutALessexpExpression4(node);
    }
    public virtual void InAGreaterexpExpression4(AGreaterexpExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterexpExpression4(AGreaterexpExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterexpExpression4(AGreaterexpExpression4 node)
    {
        InAGreaterexpExpression4(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAGreaterexpExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAAddexpExpression5(AAddexpExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddexpExpression5(AAddexpExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddexpExpression5(AAddexpExpression5 node)
    {
        InAAddexpExpression5(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAAddexpExpression5(node);
    }
    public virtual void InASubtractexpExpression5(ASubtractexpExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractexpExpression5(ASubtractexpExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractexpExpression5(ASubtractexpExpression5 node)
    {
        InASubtractexpExpression5(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutASubtractexpExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InAMultexpExpression6(AMultexpExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultexpExpression6(AMultexpExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultexpExpression6(AMultexpExpression6 node)
    {
        InAMultexpExpression6(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAMultexpExpression6(node);
    }
    public virtual void InADivexpExpression6(ADivexpExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivexpExpression6(ADivexpExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivexpExpression6(ADivexpExpression6 node)
    {
        InADivexpExpression6(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutADivexpExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InANegateexpExpression7(ANegateexpExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegateexpExpression7(ANegateexpExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegateexpExpression7(ANegateexpExpression7 node)
    {
        InANegateexpExpression7(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        OutANegateexpExpression7(node);
    }
    public virtual void InANotexpExpression7(ANotexpExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotexpExpression7(ANotexpExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotexpExpression7(ANotexpExpression7 node)
    {
        InANotexpExpression7(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        OutANotexpExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InAParenthesesexpExpression8(AParenthesesexpExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesesexpExpression8(AParenthesesexpExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesesexpExpression8(AParenthesesexpExpression8 node)
    {
        InAParenthesesexpExpression8(node);
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutAParenthesesexpExpression8(node);
    }
    public virtual void InAPassExpression8(APassExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression8(APassExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression8(APassExpression8 node)
    {
        InAPassExpression8(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression8(node);
    }
    public virtual void InAIntexpOperand(AIntexpOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntexpOperand(AIntexpOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntexpOperand(AIntexpOperand node)
    {
        InAIntexpOperand(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutAIntexpOperand(node);
    }
    public virtual void InAFloatexpOperand(AFloatexpOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatexpOperand(AFloatexpOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatexpOperand(AFloatexpOperand node)
    {
        InAFloatexpOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatexpOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAStringexpOperand(AStringexpOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringexpOperand(AStringexpOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringexpOperand(AStringexpOperand node)
    {
        InAStringexpOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringexpOperand(node);
    }
    public virtual void InANoneParamDecs(ANoneParamDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParamDecs(ANoneParamDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParamDecs(ANoneParamDecs node)
    {
        InANoneParamDecs(node);
        OutANoneParamDecs(node);
    }
    public virtual void InAOneOrMoreParamDecs(AOneOrMoreParamDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneOrMoreParamDecs(AOneOrMoreParamDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneOrMoreParamDecs(AOneOrMoreParamDecs node)
    {
        InAOneOrMoreParamDecs(node);
        if(node.GetParamDec() != null)
        {
            node.GetParamDec().Apply(this);
        }
        if(node.GetNextParamDec() != null)
        {
            node.GetNextParamDec().Apply(this);
        }
        OutAOneOrMoreParamDecs(node);
    }
    public virtual void InANoneNextParamDec(ANoneNextParamDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneNextParamDec(ANoneNextParamDec node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneNextParamDec(ANoneNextParamDec node)
    {
        InANoneNextParamDec(node);
        OutANoneNextParamDec(node);
    }
    public virtual void InANextNextParamDec(ANextNextParamDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextNextParamDec(ANextNextParamDec node)
    {
        DefaultOut(node);
    }

    public override void CaseANextNextParamDec(ANextNextParamDec node)
    {
        InANextNextParamDec(node);
        if(node.GetDelimiter() != null)
        {
            node.GetDelimiter().Apply(this);
        }
        if(node.GetParamDec() != null)
        {
            node.GetParamDec().Apply(this);
        }
        if(node.GetNextParamDec() != null)
        {
            node.GetNextParamDec().Apply(this);
        }
        OutANextNextParamDec(node);
    }
    public virtual void InAParamDec(AParamDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamDec(AParamDec node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamDec(AParamDec node)
    {
        InAParamDec(node);
        if(node.GetParamType() != null)
        {
            node.GetParamType().Apply(this);
        }
        if(node.GetParamName() != null)
        {
            node.GetParamName().Apply(this);
        }
        OutAParamDec(node);
    }
    public virtual void InANoneParameters(ANoneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameters(ANoneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameters(ANoneParameters node)
    {
        InANoneParameters(node);
        OutANoneParameters(node);
    }
    public virtual void InAOneOrMoreParameters(AOneOrMoreParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneOrMoreParameters(AOneOrMoreParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneOrMoreParameters(AOneOrMoreParameters node)
    {
        InAOneOrMoreParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetNextParameter() != null)
        {
            node.GetNextParameter().Apply(this);
        }
        OutAOneOrMoreParameters(node);
    }
    public virtual void InANoneNextParameter(ANoneNextParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneNextParameter(ANoneNextParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneNextParameter(ANoneNextParameter node)
    {
        InANoneNextParameter(node);
        OutANoneNextParameter(node);
    }
    public virtual void InANextNextParameter(ANextNextParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextNextParameter(ANextNextParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseANextNextParameter(ANextNextParameter node)
    {
        InANextNextParameter(node);
        if(node.GetDelimiter() != null)
        {
            node.GetDelimiter().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetNextParameter() != null)
        {
            node.GetNextParameter().Apply(this);
        }
        OutANextNextParameter(node);
    }
    public virtual void InAParameter(AParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameter(AParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameter(AParameter node)
    {
        InAParameter(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAParameter(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainFunction() != null)
        {
            node.GetMainFunction().Apply(this);
        }
        if(node.GetFunctionDeclarations() != null)
        {
            node.GetFunctionDeclarations().Apply(this);
        }
        if(node.GetConstantDeclarations() != null)
        {
            node.GetConstantDeclarations().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleConstantDeclarations(AMultipleConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleConstantDeclarations(AMultipleConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleConstantDeclarations(AMultipleConstantDeclarations node)
    {
        InAMultipleConstantDeclarations(node);
        if(node.GetConstantDeclarations() != null)
        {
            node.GetConstantDeclarations().Apply(this);
        }
        if(node.GetConstantDeclaration() != null)
        {
            node.GetConstantDeclaration().Apply(this);
        }
        OutAMultipleConstantDeclarations(node);
    }
    public virtual void InAPassConstantDeclarations(APassConstantDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassConstantDeclarations(APassConstantDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassConstantDeclarations(APassConstantDeclarations node)
    {
        InAPassConstantDeclarations(node);
        OutAPassConstantDeclarations(node);
    }
    public virtual void InAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstantDeclaration(AConstantDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstantDeclaration(AConstantDeclaration node)
    {
        InAConstantDeclaration(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConst() != null)
        {
            node.GetConst().Apply(this);
        }
        OutAConstantDeclaration(node);
    }
    public virtual void InAMultipleFunctionDeclarations(AMultipleFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleFunctionDeclarations(AMultipleFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleFunctionDeclarations(AMultipleFunctionDeclarations node)
    {
        InAMultipleFunctionDeclarations(node);
        if(node.GetFunctionDeclaration() != null)
        {
            node.GetFunctionDeclaration().Apply(this);
        }
        if(node.GetFunctionDeclarations() != null)
        {
            node.GetFunctionDeclarations().Apply(this);
        }
        OutAMultipleFunctionDeclarations(node);
    }
    public virtual void InAPassFunctionDeclarations(APassFunctionDeclarations node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassFunctionDeclarations(APassFunctionDeclarations node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassFunctionDeclarations(APassFunctionDeclarations node)
    {
        InAPassFunctionDeclarations(node);
        OutAPassFunctionDeclarations(node);
    }
    public virtual void InAFunctionDeclaration(AFunctionDeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionDeclaration(AFunctionDeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionDeclaration(AFunctionDeclaration node)
    {
        InAFunctionDeclaration(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetParamDecs() != null)
        {
            node.GetParamDecs().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetDef() != null)
        {
            node.GetDef().Apply(this);
        }
        OutAFunctionDeclaration(node);
    }
    public virtual void InAMainMainFunction(AMainMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainMainFunction(AMainMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainMainFunction(AMainMainFunction node)
    {
        InAMainMainFunction(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainMainFunction(node);
    }
    public virtual void InAPassMainFunction(APassMainFunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassMainFunction(APassMainFunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassMainFunction(APassMainFunction node)
    {
        InAPassMainFunction(node);
        OutAPassMainFunction(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InAPassStatements(APassStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassStatements(APassStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassStatements(APassStatements node)
    {
        InAPassStatements(node);
        OutAPassStatements(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InAIfstatementStatement(AIfstatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfstatementStatement(AIfstatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfstatementStatement(AIfstatementStatement node)
    {
        InAIfstatementStatement(node);
        if(node.GetIfStatement() != null)
        {
            node.GetIfStatement().Apply(this);
        }
        OutAIfstatementStatement(node);
    }
    public virtual void InAWhilestatementStatement(AWhilestatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhilestatementStatement(AWhilestatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhilestatementStatement(AWhilestatementStatement node)
    {
        InAWhilestatementStatement(node);
        if(node.GetWhileStatement() != null)
        {
            node.GetWhileStatement().Apply(this);
        }
        OutAWhilestatementStatement(node);
    }
    public virtual void InAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        InAFunctionCallStatementStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutAFunctionCallStatementStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InAElsee(AElsee node)
    {
        DefaultIn(node);
    }

    public virtual void OutAElsee(AElsee node)
    {
        DefaultOut(node);
    }

    public override void CaseAElsee(AElsee node)
    {
        InAElsee(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetElse() != null)
        {
            node.GetElse().Apply(this);
        }
        OutAElsee(node);
    }
    public virtual void InAIfStatement(AIfStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfStatement(AIfStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfStatement(AIfStatement node)
    {
        InAIfStatement(node);
        if(node.GetElsee() != null)
        {
            node.GetElsee().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutAIfStatement(node);
    }
    public virtual void InAWhileStatement(AWhileStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAWhileStatement(AWhileStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAWhileStatement(AWhileStatement node)
    {
        InAWhileStatement(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetWhile() != null)
        {
            node.GetWhile().Apply(this);
        }
        OutAWhileStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InAOrexpExpression(AOrexpExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrexpExpression(AOrexpExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrexpExpression(AOrexpExpression node)
    {
        InAOrexpExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAOrexpExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAAndexpExpression2(AAndexpExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndexpExpression2(AAndexpExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndexpExpression2(AAndexpExpression2 node)
    {
        InAAndexpExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAAndexpExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAEqualexpExpression3(AEqualexpExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualexpExpression3(AEqualexpExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualexpExpression3(AEqualexpExpression3 node)
    {
        InAEqualexpExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetEquivalent() != null)
        {
            node.GetEquivalent().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAEqualexpExpression3(node);
    }
    public virtual void InANotequalexpExpression3(ANotequalexpExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotequalexpExpression3(ANotequalexpExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotequalexpExpression3(ANotequalexpExpression3 node)
    {
        InANotequalexpExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetNotEquivalent() != null)
        {
            node.GetNotEquivalent().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutANotequalexpExpression3(node);
    }
    public virtual void InAGreaterequalexpExpression3(AGreaterequalexpExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterequalexpExpression3(AGreaterequalexpExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterequalexpExpression3(AGreaterequalexpExpression3 node)
    {
        InAGreaterequalexpExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetGreaterequal() != null)
        {
            node.GetGreaterequal().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAGreaterequalexpExpression3(node);
    }
    public virtual void InALessequalexpExpression3(ALessequalexpExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessequalexpExpression3(ALessequalexpExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessequalexpExpression3(ALessequalexpExpression3 node)
    {
        InALessequalexpExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        if(node.GetLessequal() != null)
        {
            node.GetLessequal().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutALessequalexpExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InALessexpExpression4(ALessexpExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessexpExpression4(ALessexpExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseALessexpExpression4(ALessexpExpression4 node)
    {
        InALessexpExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetLessThan() != null)
        {
            node.GetLessThan().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutALessexpExpression4(node);
    }
    public virtual void InAGreaterexpExpression4(AGreaterexpExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterexpExpression4(AGreaterexpExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterexpExpression4(AGreaterexpExpression4 node)
    {
        InAGreaterexpExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        if(node.GetGreaterThan() != null)
        {
            node.GetGreaterThan().Apply(this);
        }
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAGreaterexpExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAAddexpExpression5(AAddexpExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddexpExpression5(AAddexpExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddexpExpression5(AAddexpExpression5 node)
    {
        InAAddexpExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutAAddexpExpression5(node);
    }
    public virtual void InASubtractexpExpression5(ASubtractexpExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractexpExpression5(ASubtractexpExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractexpExpression5(ASubtractexpExpression5 node)
    {
        InASubtractexpExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression5() != null)
        {
            node.GetExpression5().Apply(this);
        }
        OutASubtractexpExpression5(node);
    }
    public virtual void InAPassExpression5(APassExpression5 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression5(APassExpression5 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression5(APassExpression5 node)
    {
        InAPassExpression5(node);
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAPassExpression5(node);
    }
    public virtual void InAMultexpExpression6(AMultexpExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultexpExpression6(AMultexpExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultexpExpression6(AMultexpExpression6 node)
    {
        InAMultexpExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutAMultexpExpression6(node);
    }
    public virtual void InADivexpExpression6(ADivexpExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivexpExpression6(ADivexpExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivexpExpression6(ADivexpExpression6 node)
    {
        InADivexpExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression6() != null)
        {
            node.GetExpression6().Apply(this);
        }
        OutADivexpExpression6(node);
    }
    public virtual void InAPassExpression6(APassExpression6 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression6(APassExpression6 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression6(APassExpression6 node)
    {
        InAPassExpression6(node);
        if(node.GetExpression7() != null)
        {
            node.GetExpression7().Apply(this);
        }
        OutAPassExpression6(node);
    }
    public virtual void InANegateexpExpression7(ANegateexpExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegateexpExpression7(ANegateexpExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegateexpExpression7(ANegateexpExpression7 node)
    {
        InANegateexpExpression7(node);
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegateexpExpression7(node);
    }
    public virtual void InANotexpExpression7(ANotexpExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotexpExpression7(ANotexpExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseANotexpExpression7(ANotexpExpression7 node)
    {
        InANotexpExpression7(node);
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotexpExpression7(node);
    }
    public virtual void InAPassExpression7(APassExpression7 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression7(APassExpression7 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression7(APassExpression7 node)
    {
        InAPassExpression7(node);
        if(node.GetExpression8() != null)
        {
            node.GetExpression8().Apply(this);
        }
        OutAPassExpression7(node);
    }
    public virtual void InAParenthesesexpExpression8(AParenthesesexpExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesesexpExpression8(AParenthesesexpExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesesexpExpression8(AParenthesesexpExpression8 node)
    {
        InAParenthesesexpExpression8(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        OutAParenthesesexpExpression8(node);
    }
    public virtual void InAPassExpression8(APassExpression8 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression8(APassExpression8 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression8(APassExpression8 node)
    {
        InAPassExpression8(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression8(node);
    }
    public virtual void InAIntexpOperand(AIntexpOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntexpOperand(AIntexpOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntexpOperand(AIntexpOperand node)
    {
        InAIntexpOperand(node);
        if(node.GetInt() != null)
        {
            node.GetInt().Apply(this);
        }
        OutAIntexpOperand(node);
    }
    public virtual void InAFloatexpOperand(AFloatexpOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatexpOperand(AFloatexpOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatexpOperand(AFloatexpOperand node)
    {
        InAFloatexpOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatexpOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InAStringexpOperand(AStringexpOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringexpOperand(AStringexpOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringexpOperand(AStringexpOperand node)
    {
        InAStringexpOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringexpOperand(node);
    }
    public virtual void InANoneParamDecs(ANoneParamDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParamDecs(ANoneParamDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParamDecs(ANoneParamDecs node)
    {
        InANoneParamDecs(node);
        OutANoneParamDecs(node);
    }
    public virtual void InAOneOrMoreParamDecs(AOneOrMoreParamDecs node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneOrMoreParamDecs(AOneOrMoreParamDecs node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneOrMoreParamDecs(AOneOrMoreParamDecs node)
    {
        InAOneOrMoreParamDecs(node);
        if(node.GetNextParamDec() != null)
        {
            node.GetNextParamDec().Apply(this);
        }
        if(node.GetParamDec() != null)
        {
            node.GetParamDec().Apply(this);
        }
        OutAOneOrMoreParamDecs(node);
    }
    public virtual void InANoneNextParamDec(ANoneNextParamDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneNextParamDec(ANoneNextParamDec node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneNextParamDec(ANoneNextParamDec node)
    {
        InANoneNextParamDec(node);
        OutANoneNextParamDec(node);
    }
    public virtual void InANextNextParamDec(ANextNextParamDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextNextParamDec(ANextNextParamDec node)
    {
        DefaultOut(node);
    }

    public override void CaseANextNextParamDec(ANextNextParamDec node)
    {
        InANextNextParamDec(node);
        if(node.GetNextParamDec() != null)
        {
            node.GetNextParamDec().Apply(this);
        }
        if(node.GetParamDec() != null)
        {
            node.GetParamDec().Apply(this);
        }
        if(node.GetDelimiter() != null)
        {
            node.GetDelimiter().Apply(this);
        }
        OutANextNextParamDec(node);
    }
    public virtual void InAParamDec(AParamDec node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParamDec(AParamDec node)
    {
        DefaultOut(node);
    }

    public override void CaseAParamDec(AParamDec node)
    {
        InAParamDec(node);
        if(node.GetParamName() != null)
        {
            node.GetParamName().Apply(this);
        }
        if(node.GetParamType() != null)
        {
            node.GetParamType().Apply(this);
        }
        OutAParamDec(node);
    }
    public virtual void InANoneParameters(ANoneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameters(ANoneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameters(ANoneParameters node)
    {
        InANoneParameters(node);
        OutANoneParameters(node);
    }
    public virtual void InAOneOrMoreParameters(AOneOrMoreParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOneOrMoreParameters(AOneOrMoreParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAOneOrMoreParameters(AOneOrMoreParameters node)
    {
        InAOneOrMoreParameters(node);
        if(node.GetNextParameter() != null)
        {
            node.GetNextParameter().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutAOneOrMoreParameters(node);
    }
    public virtual void InANoneNextParameter(ANoneNextParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneNextParameter(ANoneNextParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneNextParameter(ANoneNextParameter node)
    {
        InANoneNextParameter(node);
        OutANoneNextParameter(node);
    }
    public virtual void InANextNextParameter(ANextNextParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutANextNextParameter(ANextNextParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseANextNextParameter(ANextNextParameter node)
    {
        InANextNextParameter(node);
        if(node.GetNextParameter() != null)
        {
            node.GetNextParameter().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetDelimiter() != null)
        {
            node.GetDelimiter().Apply(this);
        }
        OutANextNextParameter(node);
    }
    public virtual void InAParameter(AParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParameter(AParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAParameter(AParameter node)
    {
        InAParameter(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAParameter(node);
    }
}
} // namespace CS426.analysis
