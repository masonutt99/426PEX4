/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMainfunction(AMainfunction node);
    void CaseASingleSubfunction(ASingleSubfunction node);
    void CaseANoneSubfunction(ANoneSubfunction node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseASingleStatements(ASingleStatements node);
    void CaseAAssignmentStatement(AAssignmentStatement node);
    void CaseADeclarationStatement(ADeclarationStatement node);
    void CaseACallStatement(ACallStatement node);
    void CaseAConditionStatement(AConditionStatement node);
    void CaseAAssignStatement(AAssignStatement node);
    void CaseADeclareStatement(ADeclareStatement node);
    void CaseAFunctionCallStatement(AFunctionCallStatement node);
    void CaseASingleParameters(ASingleParameters node);
    void CaseANoneParameters(ANoneParameters node);
    void CaseAIfOneStatement(AIfOneStatement node);
    void CaseAAddExpression(AAddExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseAMultiplyExpression2(AMultiplyExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseANegativeExpression3(ANegativeExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseAIntOperand(AIntOperand node);
    void CaseAStringOperand(AStringOperand node);
    void CaseAVariableOperand(AVariableOperand node);

    void CaseTAssign(TAssign node);
    void CaseTPlus(TPlus node);
    void CaseTSub(TSub node);
    void CaseTMult(TMult node);
    void CaseTEol(TEol node);
    void CaseTLeftParenthesis(TLeftParenthesis node);
    void CaseTRightParenthesis(TRightParenthesis node);
    void CaseTLeftCurly(TLeftCurly node);
    void CaseTRightCurly(TRightCurly node);
    void CaseTComma(TComma node);
    void CaseTMainDef(TMainDef node);
    void CaseTFunctionDef(TFunctionDef node);
    void CaseTKeywordIf(TKeywordIf node);
    void CaseTId(TId node);
    void CaseTComment(TComment node);
    void CaseTInteger(TInteger node);
    void CaseTString(TString node);
    void CaseTBlank(TBlank node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainfunction(AMainfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleSubfunction(ASingleSubfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneSubfunction(ANoneSubfunction node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStatements(ASingleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatement(ADeclarationStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseACallStatement(ACallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConditionStatement(AConditionStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatement(AAssignStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclareStatement(ADeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParameters(ASingleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANoneParameters(ANoneParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfOneStatement(AIfOneStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression(AAddExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpression3(ANegativeExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntOperand(AIntOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTSub(TSub node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftParenthesis(TLeftParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightParenthesis(TRightParenthesis node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftCurly(TLeftCurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightCurly(TRightCurly node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComma(TComma node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMainDef(TMainDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunctionDef(TFunctionDef node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTKeywordIf(TKeywordIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetSubfunction() != null)
        {
            node.GetSubfunction().Apply(this);
        }
        if(node.GetMainfunction() != null)
        {
            node.GetMainfunction().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMainfunction(AMainfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainfunction(AMainfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainfunction(AMainfunction node)
    {
        InAMainfunction(node);
        if(node.GetMainDef() != null)
        {
            node.GetMainDef().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutAMainfunction(node);
    }
    public virtual void InASingleSubfunction(ASingleSubfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleSubfunction(ASingleSubfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleSubfunction(ASingleSubfunction node)
    {
        InASingleSubfunction(node);
        if(node.GetFunctionDef() != null)
        {
            node.GetFunctionDef().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        OutASingleSubfunction(node);
    }
    public virtual void InANoneSubfunction(ANoneSubfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneSubfunction(ANoneSubfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneSubfunction(ANoneSubfunction node)
    {
        InANoneSubfunction(node);
        OutANoneSubfunction(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAConditionStatement(AConditionStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditionStatement(AConditionStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditionStatement(AConditionStatement node)
    {
        InAConditionStatement(node);
        if(node.GetIfOneStatement() != null)
        {
            node.GetIfOneStatement().Apply(this);
        }
        OutAConditionStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InANoneParameters(ANoneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameters(ANoneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameters(ANoneParameters node)
    {
        InANoneParameters(node);
        OutANoneParameters(node);
    }
    public virtual void InAIfOneStatement(AIfOneStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfOneStatement(AIfOneStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfOneStatement(AIfOneStatement node)
    {
        InAIfOneStatement(node);
        if(node.GetKeywordIf() != null)
        {
            node.GetKeywordIf().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        OutAIfOneStatement(node);
    }
    public virtual void InAAddExpression(AAddExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression(AAddExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression(AAddExpression node)
    {
        InAAddExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAAddExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression2(AMultiplyExpression2 node)
    {
        InAMultiplyExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAMultiplyExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InANegativeExpression3(ANegativeExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression3(ANegativeExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression3(ANegativeExpression3 node)
    {
        InANegativeExpression3(node);
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutANegativeExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetMainfunction() != null)
        {
            node.GetMainfunction().Apply(this);
        }
        if(node.GetSubfunction() != null)
        {
            node.GetSubfunction().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMainfunction(AMainfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainfunction(AMainfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainfunction(AMainfunction node)
    {
        InAMainfunction(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetMainDef() != null)
        {
            node.GetMainDef().Apply(this);
        }
        OutAMainfunction(node);
    }
    public virtual void InASingleSubfunction(ASingleSubfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleSubfunction(ASingleSubfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleSubfunction(ASingleSubfunction node)
    {
        InASingleSubfunction(node);
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFunctionDef() != null)
        {
            node.GetFunctionDef().Apply(this);
        }
        OutASingleSubfunction(node);
    }
    public virtual void InANoneSubfunction(ANoneSubfunction node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneSubfunction(ANoneSubfunction node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneSubfunction(ANoneSubfunction node)
    {
        InANoneSubfunction(node);
        OutANoneSubfunction(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignmentStatement(AAssignmentStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignmentStatement(AAssignmentStatement node)
    {
        InAAssignmentStatement(node);
        if(node.GetAssignStatement() != null)
        {
            node.GetAssignStatement().Apply(this);
        }
        OutAAssignmentStatement(node);
    }
    public virtual void InADeclarationStatement(ADeclarationStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatement(ADeclarationStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatement(ADeclarationStatement node)
    {
        InADeclarationStatement(node);
        if(node.GetDeclareStatement() != null)
        {
            node.GetDeclareStatement().Apply(this);
        }
        OutADeclarationStatement(node);
    }
    public virtual void InACallStatement(ACallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutACallStatement(ACallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseACallStatement(ACallStatement node)
    {
        InACallStatement(node);
        if(node.GetFunctionCallStatement() != null)
        {
            node.GetFunctionCallStatement().Apply(this);
        }
        OutACallStatement(node);
    }
    public virtual void InAConditionStatement(AConditionStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConditionStatement(AConditionStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAConditionStatement(AConditionStatement node)
    {
        InAConditionStatement(node);
        if(node.GetIfOneStatement() != null)
        {
            node.GetIfOneStatement().Apply(this);
        }
        OutAConditionStatement(node);
    }
    public virtual void InAAssignStatement(AAssignStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatement(AAssignStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatement(AAssignStatement node)
    {
        InAAssignStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignStatement(node);
    }
    public virtual void InADeclareStatement(ADeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclareStatement(ADeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclareStatement(ADeclareStatement node)
    {
        InADeclareStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetVarname() != null)
        {
            node.GetVarname().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclareStatement(node);
    }
    public virtual void InAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatement(AFunctionCallStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatement(AFunctionCallStatement node)
    {
        InAFunctionCallStatement(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionCallStatement(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InANoneParameters(ANoneParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutANoneParameters(ANoneParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseANoneParameters(ANoneParameters node)
    {
        InANoneParameters(node);
        OutANoneParameters(node);
    }
    public virtual void InAIfOneStatement(AIfOneStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfOneStatement(AIfOneStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfOneStatement(AIfOneStatement node)
    {
        InAIfOneStatement(node);
        if(node.GetRightCurly() != null)
        {
            node.GetRightCurly().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftCurly() != null)
        {
            node.GetLeftCurly().Apply(this);
        }
        if(node.GetRightParenthesis() != null)
        {
            node.GetRightParenthesis().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftParenthesis() != null)
        {
            node.GetLeftParenthesis().Apply(this);
        }
        if(node.GetKeywordIf() != null)
        {
            node.GetKeywordIf().Apply(this);
        }
        OutAIfOneStatement(node);
    }
    public virtual void InAAddExpression(AAddExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression(AAddExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression(AAddExpression node)
    {
        InAAddExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAAddExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression2(AMultiplyExpression2 node)
    {
        InAMultiplyExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAMultiplyExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InANegativeExpression3(ANegativeExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression3(ANegativeExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression3(ANegativeExpression3 node)
    {
        InANegativeExpression3(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetSub() != null)
        {
            node.GetSub().Apply(this);
        }
        OutANegativeExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InAIntOperand(AIntOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntOperand(AIntOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntOperand(AIntOperand node)
    {
        InAIntOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
}
} // namespace CS426.analysis
