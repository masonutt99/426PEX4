/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTAssign(TAssign node)
    {
        index = 0;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 1;
    }

    public override void CaseTSub(TSub node)
    {
        index = 2;
    }

    public override void CaseTMult(TMult node)
    {
        index = 3;
    }

    public override void CaseTEol(TEol node)
    {
        index = 4;
    }

    public override void CaseTLeftParenthesis(TLeftParenthesis node)
    {
        index = 5;
    }

    public override void CaseTRightParenthesis(TRightParenthesis node)
    {
        index = 6;
    }

    public override void CaseTLeftCurly(TLeftCurly node)
    {
        index = 7;
    }

    public override void CaseTRightCurly(TRightCurly node)
    {
        index = 8;
    }

    public override void CaseTComma(TComma node)
    {
        index = 9;
    }

    public override void CaseTMainDef(TMainDef node)
    {
        index = 10;
    }

    public override void CaseTFunctionDef(TFunctionDef node)
    {
        index = 11;
    }

    public override void CaseTKeywordIf(TKeywordIf node)
    {
        index = 12;
    }

    public override void CaseTId(TId node)
    {
        index = 13;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 14;
    }

    public override void CaseTString(TString node)
    {
        index = 15;
    }

    public override void CaseEOF(EOF node)
    {
        index = 16;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(2), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(3), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(3), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(4), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(4), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(4), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(4), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(5), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(6), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(7), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(8), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(8), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(9), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(10), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(10), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(11), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(11), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(12), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(12), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(13), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(13), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(13), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PSubfunction psubfunctionNode2 = (PSubfunction)nodeArrayList1[0];
        PMainfunction pmainfunctionNode3 = (PMainfunction)nodeArrayList2[0];
        AProgram pprogramNode1 = new AProgram (
              psubfunctionNode2,
              pmainfunctionNode3
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMainDef tmaindefNode2 = (TMainDef)nodeArrayList1[0];
        TLeftParenthesis tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2[0];
        PStatements pstatementsNode4 = (PStatements)nodeArrayList3[0];
        TRightParenthesis trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4[0];
        AMainfunction pmainfunctionNode1 = new AMainfunction (
              tmaindefNode2,
              tleftparenthesisNode3,
              pstatementsNode4,
              trightparenthesisNode5
        );
        nodeList.Add(pmainfunctionNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFunctionDef tfunctiondefNode2 = (TFunctionDef)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TLeftParenthesis tleftparenthesisNode4 = (TLeftParenthesis)nodeArrayList3[0];
        PStatements pstatementsNode5 = (PStatements)nodeArrayList4[0];
        TRightParenthesis trightparenthesisNode6 = (TRightParenthesis)nodeArrayList5[0];
        ASingleSubfunction psubfunctionNode1 = new ASingleSubfunction (
              tfunctiondefNode2,
              tidNode3,
              tleftparenthesisNode4,
              pstatementsNode5,
              trightparenthesisNode6
        );
        nodeList.Add(psubfunctionNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ANoneSubfunction psubfunctionNode1 = new ANoneSubfunction (
        );
        nodeList.Add(psubfunctionNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatement pstatementNode2 = (PStatement)nodeArrayList1[0];
        PStatements pstatementsNode3 = (PStatements)nodeArrayList2[0];
        AMultipleStatements pstatementsNode1 = new AMultipleStatements (
              pstatementNode2,
              pstatementsNode3
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ASingleStatements pstatementsNode1 = new ASingleStatements (
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignStatement passignstatementNode2 = (PAssignStatement)nodeArrayList1[0];
        AAssignmentStatement pstatementNode1 = new AAssignmentStatement (
              passignstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclareStatement pdeclarestatementNode2 = (PDeclareStatement)nodeArrayList1[0];
        ADeclarationStatement pstatementNode1 = new ADeclarationStatement (
              pdeclarestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionCallStatement pfunctioncallstatementNode2 = (PFunctionCallStatement)nodeArrayList1[0];
        ACallStatement pstatementNode1 = new ACallStatement (
              pfunctioncallstatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIfOneStatement pifonestatementNode2 = (PIfOneStatement)nodeArrayList1[0];
        AConditionStatement pstatementNode1 = new AConditionStatement (
              pifonestatementNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AAssignStatement passignstatementNode1 = new AAssignStatement (
              tidNode2,
              tassignNode3,
              pexpressionNode4,
              teolNode5
        );
        nodeList.Add(passignstatementNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        ADeclareStatement pdeclarestatementNode1 = new ADeclareStatement (
              tidNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarestatementNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLeftParenthesis tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        TRightParenthesis trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AFunctionCallStatement pfunctioncallstatementNode1 = new AFunctionCallStatement (
              tidNode2,
              tleftparenthesisNode3,
              pparametersNode4,
              trightparenthesisNode5,
              teolNode6
        );
        nodeList.Add(pfunctioncallstatementNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        ASingleParameters pparametersNode1 = new ASingleParameters (
              pexpressionNode2
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ANoneParameters pparametersNode1 = new ANoneParameters (
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TKeywordIf tkeywordifNode2 = (TKeywordIf)nodeArrayList1[0];
        TLeftParenthesis tleftparenthesisNode3 = (TLeftParenthesis)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TRightParenthesis trightparenthesisNode5 = (TRightParenthesis)nodeArrayList4[0];
        TLeftCurly tleftcurlyNode6 = (TLeftCurly)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRightCurly trightcurlyNode8 = (TRightCurly)nodeArrayList7[0];
        AIfOneStatement pifonestatementNode1 = new AIfOneStatement (
              tkeywordifNode2,
              tleftparenthesisNode3,
              pexpressionNode4,
              trightparenthesisNode5,
              tleftcurlyNode6,
              pstatementsNode7,
              trightcurlyNode8
        );
        nodeList.Add(pifonestatementNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        AAddExpression pexpressionNode1 = new AAddExpression (
              pexpressionNode2,
              tplusNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        APassExpression pexpressionNode1 = new APassExpression (
              pexpression2Node2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TMult tmultNode3 = (TMult)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        AMultiplyExpression2 pexpression2Node1 = new AMultiplyExpression2 (
              pexpression2Node2,
              tmultNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        APassExpression2 pexpression2Node1 = new APassExpression2 (
              pexpression3Node2
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TSub tsubNode2 = (TSub)nodeArrayList1[0];
        POperand poperandNode3 = (POperand)nodeArrayList2[0];
        ANegativeExpression3 pexpression3Node1 = new ANegativeExpression3 (
              tsubNode2,
              poperandNode3
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        APassExpression3 pexpression3Node1 = new APassExpression3 (
              poperandNode2
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntOperand poperandNode1 = new AIntOperand (
              tintegerNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStringOperand poperandNode1 = new AStringOperand (
              tstringNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVariableOperand poperandNode1 = new AVariableOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 3},
        new int[] {11, 0, 1},
      },
      new int[][] {
        new int[] {-1, 3, 1},
        new int[] {13, 0, 4},
      },
      new int[][] {
        new int[] {-1, 3, 2},
        new int[] {16, 2, -1},
      },
      new int[][] {
        new int[] {-1, 3, 3},
        new int[] {10, 0, 5},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {5, 0, 7},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {5, 0, 8},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {12, 0, 9},
        new int[] {13, 0, 10},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {12, 0, 9},
        new int[] {13, 0, 10},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {5, 0, 18},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {0, 0, 19},
        new int[] {5, 0, 20},
        new int[] {13, 0, 21},
      },
      new int[][] {
        new int[] {-1, 3, 11},
        new int[] {6, 0, 22},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {12, 0, 9},
        new int[] {13, 0, 10},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 3, 17},
        new int[] {6, 0, 24},
      },
      new int[][] {
        new int[] {-1, 3, 18},
        new int[] {2, 0, 25},
        new int[] {13, 0, 26},
        new int[] {14, 0, 27},
        new int[] {15, 0, 28},
      },
      new int[][] {
        new int[] {-1, 3, 19},
        new int[] {2, 0, 25},
        new int[] {13, 0, 26},
        new int[] {14, 0, 27},
        new int[] {15, 0, 28},
      },
      new int[][] {
        new int[] {-1, 1, 14},
        new int[] {2, 0, 25},
        new int[] {13, 0, 26},
        new int[] {14, 0, 27},
        new int[] {15, 0, 28},
      },
      new int[][] {
        new int[] {-1, 3, 21},
        new int[] {4, 0, 36},
      },
      new int[][] {
        new int[] {-1, 1, 2},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 25},
        new int[] {13, 0, 26},
        new int[] {14, 0, 27},
        new int[] {15, 0, 28},
      },
      new int[][] {
        new int[] {-1, 1, 24},
      },
      new int[][] {
        new int[] {-1, 1, 22},
      },
      new int[][] {
        new int[] {-1, 1, 23},
      },
      new int[][] {
        new int[] {-1, 3, 29},
        new int[] {1, 0, 38},
        new int[] {6, 0, 39},
      },
      new int[][] {
        new int[] {-1, 1, 17},
        new int[] {3, 0, 40},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 3, 33},
        new int[] {1, 0, 38},
        new int[] {4, 0, 41},
      },
      new int[][] {
        new int[] {-1, 3, 34},
        new int[] {6, 0, 42},
      },
      new int[][] {
        new int[] {-1, 1, 13},
        new int[] {1, 0, 38},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 20},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {2, 0, 25},
        new int[] {13, 0, 26},
        new int[] {14, 0, 27},
        new int[] {15, 0, 28},
      },
      new int[][] {
        new int[] {-1, 3, 39},
        new int[] {7, 0, 44},
      },
      new int[][] {
        new int[] {-1, 3, 40},
        new int[] {2, 0, 25},
        new int[] {13, 0, 26},
        new int[] {14, 0, 27},
        new int[] {15, 0, 28},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 3, 42},
        new int[] {4, 0, 46},
      },
      new int[][] {
        new int[] {-1, 1, 16},
        new int[] {3, 0, 40},
      },
      new int[][] {
        new int[] {-1, 1, 5},
        new int[] {12, 0, 9},
        new int[] {13, 0, 10},
      },
      new int[][] {
        new int[] {-1, 1, 18},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {8, 0, 48},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 2},
      },
      new int[][] {
        new int[] {-1, 6},
      },
      new int[][] {
        new int[] {-1, 3},
      },
      new int[][] {
        new int[] {-1, 11},
        new int[] {8, 17},
        new int[] {12, 23},
        new int[] {44, 47},
      },
      new int[][] {
        new int[] {-1, 12},
      },
      new int[][] {
        new int[] {-1, 13},
      },
      new int[][] {
        new int[] {-1, 14},
      },
      new int[][] {
        new int[] {-1, 15},
      },
      new int[][] {
        new int[] {-1, 34},
      },
      new int[][] {
        new int[] {-1, 16},
      },
      new int[][] {
        new int[] {-1, 29},
        new int[] {19, 33},
        new int[] {20, 35},
      },
      new int[][] {
        new int[] {-1, 30},
        new int[] {38, 43},
      },
      new int[][] {
        new int[] {-1, 31},
        new int[] {40, 45},
      },
      new int[][] {
        new int[] {-1, 32},
        new int[] {25, 37},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'main', 'function'",
      "expecting: id",
      "expecting: EOF",
      "expecting: 'main'",
      "expecting: '('",
      "expecting: ')', 'if', id",
      "expecting: ':=', '(', id",
      "expecting: ')'",
      "expecting: ')', '}', 'if', id",
      "expecting: '-', id, integer, string",
      "expecting: '-', ')', id, integer, string",
      "expecting: ';'",
      "expecting: ')', '}'",
      "expecting: id, integer, string",
      "expecting: '+', '*', ';', ')'",
      "expecting: '+', ')'",
      "expecting: '+', ';'",
      "expecting: '{'",
      "expecting: '}', 'if', id",
      "expecting: '}'",
    };

    private static int[] errors = {
      0, 1, 2, 3, 4, 4, 2, 5, 5, 4, 6, 7, 8, 8, 8, 8, 
      8, 7, 9, 9, 10, 11, 3, 12, 2, 13, 14, 14, 14, 15, 14, 14, 
      14, 16, 7, 15, 8, 14, 9, 17, 9, 8, 11, 14, 18, 14, 8, 19, 
      8, 
    };
}
}
