/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PMainfunction : Node
{
}

public abstract class PSubfunction : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PAssignStatement : Node
{
}

public abstract class PDeclareStatement : Node
{
}

public abstract class PFunctionCallStatement : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PIfOneStatement : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class POperand : Node
{
}


public sealed class AProgram : PProgram
{
    private PSubfunction _subfunction_;
    private PMainfunction _mainfunction_;

    public AProgram ()
    {
    }

    public AProgram (
            PSubfunction _subfunction_,
            PMainfunction _mainfunction_
    )
    {
        SetSubfunction (_subfunction_);
        SetMainfunction (_mainfunction_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PSubfunction)CloneNode (_subfunction_),
            (PMainfunction)CloneNode (_mainfunction_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PSubfunction GetSubfunction ()
    {
        return _subfunction_;
    }

    public void SetSubfunction (PSubfunction node)
    {
        if(_subfunction_ != null)
        {
            _subfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _subfunction_ = node;
    }
    public PMainfunction GetMainfunction ()
    {
        return _mainfunction_;
    }

    public void SetMainfunction (PMainfunction node)
    {
        if(_mainfunction_ != null)
        {
            _mainfunction_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mainfunction_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_subfunction_)
            + ToString (_mainfunction_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _subfunction_ == child )
        {
            _subfunction_ = null;
            return;
        }
        if ( _mainfunction_ == child )
        {
            _mainfunction_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _subfunction_ == oldChild )
        {
            SetSubfunction ((PSubfunction) newChild);
            return;
        }
        if ( _mainfunction_ == oldChild )
        {
            SetMainfunction ((PMainfunction) newChild);
            return;
        }
    }

}
public sealed class AMainfunction : PMainfunction
{
    private TMainDef _main_def_;
    private TLeftParenthesis _left_parenthesis_;
    private PStatements _statements_;
    private TRightParenthesis _right_parenthesis_;

    public AMainfunction ()
    {
    }

    public AMainfunction (
            TMainDef _main_def_,
            TLeftParenthesis _left_parenthesis_,
            PStatements _statements_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetMainDef (_main_def_);
        SetLeftParenthesis (_left_parenthesis_);
        SetStatements (_statements_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new AMainfunction (
            (TMainDef)CloneNode (_main_def_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PStatements)CloneNode (_statements_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainfunction(this);
    }

    public TMainDef GetMainDef ()
    {
        return _main_def_;
    }

    public void SetMainDef (TMainDef node)
    {
        if(_main_def_ != null)
        {
            _main_def_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_def_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_def_)
            + ToString (_left_parenthesis_)
            + ToString (_statements_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_def_ == child )
        {
            _main_def_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_def_ == oldChild )
        {
            SetMainDef ((TMainDef) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class ASingleSubfunction : PSubfunction
{
    private TFunctionDef _function_def_;
    private TId _id_;
    private TLeftParenthesis _left_parenthesis_;
    private PStatements _statements_;
    private TRightParenthesis _right_parenthesis_;

    public ASingleSubfunction ()
    {
    }

    public ASingleSubfunction (
            TFunctionDef _function_def_,
            TId _id_,
            TLeftParenthesis _left_parenthesis_,
            PStatements _statements_,
            TRightParenthesis _right_parenthesis_
    )
    {
        SetFunctionDef (_function_def_);
        SetId (_id_);
        SetLeftParenthesis (_left_parenthesis_);
        SetStatements (_statements_);
        SetRightParenthesis (_right_parenthesis_);
    }

    public override Object Clone()
    {
        return new ASingleSubfunction (
            (TFunctionDef)CloneNode (_function_def_),
            (TId)CloneNode (_id_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PStatements)CloneNode (_statements_),
            (TRightParenthesis)CloneNode (_right_parenthesis_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleSubfunction(this);
    }

    public TFunctionDef GetFunctionDef ()
    {
        return _function_def_;
    }

    public void SetFunctionDef (TFunctionDef node)
    {
        if(_function_def_ != null)
        {
            _function_def_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_def_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_def_)
            + ToString (_id_)
            + ToString (_left_parenthesis_)
            + ToString (_statements_)
            + ToString (_right_parenthesis_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_def_ == child )
        {
            _function_def_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_def_ == oldChild )
        {
            SetFunctionDef ((TFunctionDef) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
    }

}
public sealed class ANoneSubfunction : PSubfunction
{


    public ANoneSubfunction (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneSubfunction (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneSubfunction(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ASingleStatements : PStatements
{


    public ASingleStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAssignmentStatement : PStatement
{
    private PAssignStatement _assign_statement_;

    public AAssignmentStatement ()
    {
    }

    public AAssignmentStatement (
            PAssignStatement _assign_statement_
    )
    {
        SetAssignStatement (_assign_statement_);
    }

    public override Object Clone()
    {
        return new AAssignmentStatement (
            (PAssignStatement)CloneNode (_assign_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignmentStatement(this);
    }

    public PAssignStatement GetAssignStatement ()
    {
        return _assign_statement_;
    }

    public void SetAssignStatement (PAssignStatement node)
    {
        if(_assign_statement_ != null)
        {
            _assign_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assign_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assign_statement_ == child )
        {
            _assign_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assign_statement_ == oldChild )
        {
            SetAssignStatement ((PAssignStatement) newChild);
            return;
        }
    }

}
public sealed class ADeclarationStatement : PStatement
{
    private PDeclareStatement _declare_statement_;

    public ADeclarationStatement ()
    {
    }

    public ADeclarationStatement (
            PDeclareStatement _declare_statement_
    )
    {
        SetDeclareStatement (_declare_statement_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatement (
            (PDeclareStatement)CloneNode (_declare_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatement(this);
    }

    public PDeclareStatement GetDeclareStatement ()
    {
        return _declare_statement_;
    }

    public void SetDeclareStatement (PDeclareStatement node)
    {
        if(_declare_statement_ != null)
        {
            _declare_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declare_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declare_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declare_statement_ == child )
        {
            _declare_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declare_statement_ == oldChild )
        {
            SetDeclareStatement ((PDeclareStatement) newChild);
            return;
        }
    }

}
public sealed class ACallStatement : PStatement
{
    private PFunctionCallStatement _function_call_statement_;

    public ACallStatement ()
    {
    }

    public ACallStatement (
            PFunctionCallStatement _function_call_statement_
    )
    {
        SetFunctionCallStatement (_function_call_statement_);
    }

    public override Object Clone()
    {
        return new ACallStatement (
            (PFunctionCallStatement)CloneNode (_function_call_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseACallStatement(this);
    }

    public PFunctionCallStatement GetFunctionCallStatement ()
    {
        return _function_call_statement_;
    }

    public void SetFunctionCallStatement (PFunctionCallStatement node)
    {
        if(_function_call_statement_ != null)
        {
            _function_call_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_statement_ == child )
        {
            _function_call_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_statement_ == oldChild )
        {
            SetFunctionCallStatement ((PFunctionCallStatement) newChild);
            return;
        }
    }

}
public sealed class AConditionStatement : PStatement
{
    private PIfOneStatement _if_one_statement_;

    public AConditionStatement ()
    {
    }

    public AConditionStatement (
            PIfOneStatement _if_one_statement_
    )
    {
        SetIfOneStatement (_if_one_statement_);
    }

    public override Object Clone()
    {
        return new AConditionStatement (
            (PIfOneStatement)CloneNode (_if_one_statement_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConditionStatement(this);
    }

    public PIfOneStatement GetIfOneStatement ()
    {
        return _if_one_statement_;
    }

    public void SetIfOneStatement (PIfOneStatement node)
    {
        if(_if_one_statement_ != null)
        {
            _if_one_statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_one_statement_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_one_statement_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_one_statement_ == child )
        {
            _if_one_statement_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_one_statement_ == oldChild )
        {
            SetIfOneStatement ((PIfOneStatement) newChild);
            return;
        }
    }

}
public sealed class AAssignStatement : PAssignStatement
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AAssignStatement ()
    {
    }

    public AAssignStatement (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignStatement (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ADeclareStatement : PDeclareStatement
{
    private TId _type_;
    private TId _varname_;
    private TEol _eol_;

    public ADeclareStatement ()
    {
    }

    public ADeclareStatement (
            TId _type_,
            TId _varname_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetVarname (_varname_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclareStatement (
            (TId)CloneNode (_type_),
            (TId)CloneNode (_varname_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclareStatement(this);
    }

    public TId GetType ()
    {
        return _type_;
    }

    public void SetType (TId node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetVarname ()
    {
        return _varname_;
    }

    public void SetVarname (TId node)
    {
        if(_varname_ != null)
        {
            _varname_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _varname_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_varname_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _varname_ == child )
        {
            _varname_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((TId) newChild);
            return;
        }
        if ( _varname_ == oldChild )
        {
            SetVarname ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallStatement : PFunctionCallStatement
{
    private TId _id_;
    private TLeftParenthesis _left_parenthesis_;
    private PParameters _parameters_;
    private TRightParenthesis _right_parenthesis_;
    private TEol _eol_;

    public AFunctionCallStatement ()
    {
    }

    public AFunctionCallStatement (
            TId _id_,
            TLeftParenthesis _left_parenthesis_,
            PParameters _parameters_,
            TRightParenthesis _right_parenthesis_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetLeftParenthesis (_left_parenthesis_);
        SetParameters (_parameters_);
        SetRightParenthesis (_right_parenthesis_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionCallStatement (
            (TId)CloneNode (_id_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PParameters)CloneNode (_parameters_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallStatement(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_left_parenthesis_)
            + ToString (_parameters_)
            + ToString (_right_parenthesis_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class ASingleParameters : PParameters
{
    private PExpression _expression_;

    public ASingleParameters ()
    {
    }

    public ASingleParameters (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new ASingleParameters (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParameters(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ANoneParameters : PParameters
{


    public ANoneParameters (
    )
    {
    }

    public override Object Clone()
    {
        return new ANoneParameters (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANoneParameters(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AIfOneStatement : PIfOneStatement
{
    private TKeywordIf _keyword_if_;
    private TLeftParenthesis _left_parenthesis_;
    private PExpression _expression_;
    private TRightParenthesis _right_parenthesis_;
    private TLeftCurly _left_curly_;
    private PStatements _statements_;
    private TRightCurly _right_curly_;

    public AIfOneStatement ()
    {
    }

    public AIfOneStatement (
            TKeywordIf _keyword_if_,
            TLeftParenthesis _left_parenthesis_,
            PExpression _expression_,
            TRightParenthesis _right_parenthesis_,
            TLeftCurly _left_curly_,
            PStatements _statements_,
            TRightCurly _right_curly_
    )
    {
        SetKeywordIf (_keyword_if_);
        SetLeftParenthesis (_left_parenthesis_);
        SetExpression (_expression_);
        SetRightParenthesis (_right_parenthesis_);
        SetLeftCurly (_left_curly_);
        SetStatements (_statements_);
        SetRightCurly (_right_curly_);
    }

    public override Object Clone()
    {
        return new AIfOneStatement (
            (TKeywordIf)CloneNode (_keyword_if_),
            (TLeftParenthesis)CloneNode (_left_parenthesis_),
            (PExpression)CloneNode (_expression_),
            (TRightParenthesis)CloneNode (_right_parenthesis_),
            (TLeftCurly)CloneNode (_left_curly_),
            (PStatements)CloneNode (_statements_),
            (TRightCurly)CloneNode (_right_curly_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfOneStatement(this);
    }

    public TKeywordIf GetKeywordIf ()
    {
        return _keyword_if_;
    }

    public void SetKeywordIf (TKeywordIf node)
    {
        if(_keyword_if_ != null)
        {
            _keyword_if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _keyword_if_ = node;
    }
    public TLeftParenthesis GetLeftParenthesis ()
    {
        return _left_parenthesis_;
    }

    public void SetLeftParenthesis (TLeftParenthesis node)
    {
        if(_left_parenthesis_ != null)
        {
            _left_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_parenthesis_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRightParenthesis GetRightParenthesis ()
    {
        return _right_parenthesis_;
    }

    public void SetRightParenthesis (TRightParenthesis node)
    {
        if(_right_parenthesis_ != null)
        {
            _right_parenthesis_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_parenthesis_ = node;
    }
    public TLeftCurly GetLeftCurly ()
    {
        return _left_curly_;
    }

    public void SetLeftCurly (TLeftCurly node)
    {
        if(_left_curly_ != null)
        {
            _left_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_curly_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightCurly GetRightCurly ()
    {
        return _right_curly_;
    }

    public void SetRightCurly (TRightCurly node)
    {
        if(_right_curly_ != null)
        {
            _right_curly_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_curly_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_keyword_if_)
            + ToString (_left_parenthesis_)
            + ToString (_expression_)
            + ToString (_right_parenthesis_)
            + ToString (_left_curly_)
            + ToString (_statements_)
            + ToString (_right_curly_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _keyword_if_ == child )
        {
            _keyword_if_ = null;
            return;
        }
        if ( _left_parenthesis_ == child )
        {
            _left_parenthesis_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _right_parenthesis_ == child )
        {
            _right_parenthesis_ = null;
            return;
        }
        if ( _left_curly_ == child )
        {
            _left_curly_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _right_curly_ == child )
        {
            _right_curly_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _keyword_if_ == oldChild )
        {
            SetKeywordIf ((TKeywordIf) newChild);
            return;
        }
        if ( _left_parenthesis_ == oldChild )
        {
            SetLeftParenthesis ((TLeftParenthesis) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _right_parenthesis_ == oldChild )
        {
            SetRightParenthesis ((TRightParenthesis) newChild);
            return;
        }
        if ( _left_curly_ == oldChild )
        {
            SetLeftCurly ((TLeftCurly) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _right_curly_ == oldChild )
        {
            SetRightCurly ((TRightCurly) newChild);
            return;
        }
    }

}
public sealed class AAddExpression : PExpression
{
    private PExpression _expression_;
    private TPlus _plus_;
    private PExpression2 _expression2_;

    public AAddExpression ()
    {
    }

    public AAddExpression (
            PExpression _expression_,
            TPlus _plus_,
            PExpression2 _expression2_
    )
    {
        SetExpression (_expression_);
        SetPlus (_plus_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new AAddExpression (
            (PExpression)CloneNode (_expression_),
            (TPlus)CloneNode (_plus_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_plus_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression2 _expression2_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TMult _mult_;
    private PExpression3 _expression3_;

    public AMultiplyExpression2 ()
    {
    }

    public AMultiplyExpression2 (
            PExpression2 _expression2_,
            TMult _mult_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetMult (_mult_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new AMultiplyExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TMult)CloneNode (_mult_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_mult_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class ANegativeExpression3 : PExpression3
{
    private TSub _sub_;
    private POperand _operand_;

    public ANegativeExpression3 ()
    {
    }

    public ANegativeExpression3 (
            TSub _sub_,
            POperand _operand_
    )
    {
        SetSub (_sub_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new ANegativeExpression3 (
            (TSub)CloneNode (_sub_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExpression3(this);
    }

    public TSub GetSub ()
    {
        return _sub_;
    }

    public void SetSub (TSub node)
    {
        if(_sub_ != null)
        {
            _sub_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _sub_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_sub_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _sub_ == child )
        {
            _sub_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _sub_ == oldChild )
        {
            SetSub ((TSub) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private POperand _operand_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntOperand : POperand
{
    private TInteger _integer_;

    public AIntOperand ()
    {
    }

    public AIntOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TString _string_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
